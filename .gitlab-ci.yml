# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


variables:
    -IMAGE_NAME: wole85/gitlab
    -IMAGE-TAG:  python-app-1.0

run_tests:
  image: python:3.8
  script:
    - python -m venv venv # create a new virtual environment
    - source venv/bin/activate # activate the virtual environment
    - pip install --upgrade pip # upgrade pip inside the virtual environment
    - pip install -r requirements.txt
    - pip install bs4  # install dependencies inside the virtual environment
    - python  # run tests inside the virtual environment

build_image:
  image: docker:20.10.16 # This image is the docker client image that makes the docker command below executable in the docker container
  services:
    - docker:23.10.16-dind # This image is the docker daemon and it listen to docker API request. In this case, for the docker client to execute the docker command in the container it needs to do that through the docker server and the docker daemon makes the connection between the docker server and the docker client possible. Also note, docker daemon manages docker images, objects, volumes and network.
  
  variables:
    DOCKER_TLS_CERTDIR: "/certs" #This will tell docker to create a certificate in a directory - certs,  to ensure the communication between the docker image and docker daemon 
  before_script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD #This logs into the docker hub using the username and password credentials defined in the settings sections of CI/CD
  script:
    - docker build -t $IMAGE_NAME:$IMAGE-TAG .  #This builds the docker image by referencing your private/public repository name in docker(Bosun is the new image name)
    - docker push $IMAGE_NAME:$IMAGE        #This pushes the docker image to the  referened repository in docker hub


